/*
BEGIN ANNOTATION
PROBLEM URL: open.kattis.com/problems/tictactoe2
TAGS: brute force, precomputation
EXPLANATION:
Another program generates an array encoding whether each board state is reachable depth-first.
The submitted program look up whether a given state is accessible using the other program's generated table.
END ANNOTATION
*/

// NOTE: The data generation program, which contains most of the logic, is included at the bottom.

#include <array>
#include <iostream>
#include <vector>

using namespace std;

// Encodes each board state as a unique id.
inline constexpr unsigned toNum(const array<array<unsigned, 3>, 3>& b)
{
	return
		b[0][0] * 6561 +
		b[0][1] * 2187 +
		b[0][2] * 729 +
		b[1][0] * 243 +
		b[1][1] * 81 +
		b[1][2] * 27 +
		b[2][0] * 9 +
		b[2][1] * 3 +
		b[2][2] * 1;
}

// A lookup table of all games' reachability generated by the data generation program.
constexpr const array<unsigned long long, 19683 / 64 + 1> reachable{ 0x869574472869caab, 0x6014455d11ca1055, 0x6105586834e555b9, 0x47280034100d3955, 0xd39556e580511574, 0x9488008039601440, 0x88e50d39556aba23, 0x105586820ab0d2ae, 0x5580034100d39556, 0x2ac34aba239434e5, 0x20ab0d000341008, 0x14455d11ca000000, 0x58051034e555b960, 0x5aac88e5a200200e, 0xac342ba239434e55, 0x8800803960144082, 0xa200200aba2396, 0xa2395cb00a200000, 0x869caab72c0288ab, 0xc342ba239434e555, 0xb00a22ac88e5082a, 0xb082ac341a50aadc, 0x5868000a08061ca2, 0x34100d39556105, 0x34aba239434e5558, 0xab0d0003410082ac, 0xd39556000000020, 0x39420ab0d2ae88e5, 0x98aab50c0088aba2, 0xa72aac20ab0d06, 0xb0d0003410000682, 0x82ac34000000020a, 0x1a08069caab0, 0x682000000, 0xe580511574472800, 0x8039601440d39556, 0x395568ba23968800, 0x20ab0d2ae88e50d, 0x8e5a200200e58051, 0x28800802ae8, 0x22ae88e572c02880, 0x95561a72aadcb00a, 0x20ab0d2ae88e50d3, 0x8b72c02888ba2394, 0x72aac20ab0d049ca, 0x396014400028201a, 0x200aba2396880080, 0xb00a20000000a200, 0xb72c0288aba2395c, 0x2880080069caa, 0x72c0288000, 0x8944004000000000, 0x4472d10010072c02, 0x72c0288aba239557, 0x401cb00a2069caab, 0x9caab45911cb4400, 0x6105082857447286, 0xb0d2ae88e50d3955, 0x2c02888ba239420a, 0xac20ab0d0498a8b7, 0x88e500068200a72a, 0x1a62aadcb00a22ae, 0x62910010072c0288, 0xd11ca0a72aad1740, 0xc20ab0d041561a50, 0xa8b00068201a72aa, 0x45849174472849c, 0x41561a00068200, 0x9556105586800000, 0x34e55580034100d3, 0x10082ac34aba2394, 0x20ab0d00034, 0x2ae88e50d3955600, 0x88aba239420ab0d, 0xab0d069caab50c0, 0x68201a32aac2, 0x20ab0d000341, 0x69caab082ac34000, 0x200000000001a080, 0xe555800000000068, 0x82ac342ba239434, 0xaadcb00a22ac88e5, 0xca2b082ac341a50, 0x8aba2394001a0806, 0xa2069caab72c028, 0x5911ca4400401cb0, 0x68570432868caab5, 0xca2b082ac3410558, 0x1a50aac001a08061, 0x8040141a15911ca, 0x15860001a, 0x20ab0d000341000, 0xaab082ac34000000, 0x1a08069c, 0xd000000000068200, 0x68201a72aac20ab0, 0x144450869caab000, 0x1a00068201055868, 0x4156, 0x682000, 0x1055868001a08, 0x0, 0x455d11ca00000000, 0x51034e555b96014, 0xae88e5a200200e58, 0x34aba239434e5558, 0x803960144082ac, 0xa200200ab2239688, 0x395cb00a20000000, 0x942ab72c0288ab22, 0x4aba239434e55586, 0xa20ae88e5082ac3, 0x82ac3418728adcb0, 0x10000a08069caab0, 0x88e5a200200e5805, 0x28800802ae, 0xa22ae88e572c0288, 0x2001a72aadcb00, 0x1cb00a20000000a2, 0x1000000000000000, 0x400401cb00a25100, 0x22ae88e555911cb4, 0x2881a72aadcb00a, 0x564472d10010072c, 0xa15d11ca1a72aac, 0xa239434e55584142, 0xae88e5082ac34ab, 0xc3418628adcb00a2, 0x1a08029caab082a, 0xb72c0288ab223940, 0x401cb00a206902a, 0x2942ab159018a440, 0x3410050694244728, 0x1a08069caab082ac, 0x15d11ca18728ac00, 0x868001a080005618, 0x6014400000001055, 0xaba239688008039, 0xa20000000a20020, 0x2c0288aba2395cb0, 0x2880080069caab7, 0x72c028800000, 0x4400400000000000, 0x72d10010072c0289, 0xc0288aba23955644, 0x1cb00a2069caab72, 0xaab05d11cb440040, 0x50829574472869c, 0x2000000022002001, 0x143002, 0x4300221100100000, 0x5111424400401, 0x40000000000000, 0x44, 0x4400400000000, 0x3002228600440000, 0x51114244004014, 0x110000000110010, 0x8600440511142a18, 0x88aba23940000002, 0xa20698aab72c02, 0x5d018b4400401cb, 0x869434472829caab, 0x10072c02881055, 0x14400401564062d1, 0x472b140140000000, 0x5205564480511424, 0x69574472869caab0, 0x14405d11ca10558, 0x105586820c505b96, 0x5580014100539556, 0x2ac34aba239434e5, 0xdcb00a20ae88e508, 0xaab082ac3418728a, 0xb22394001a08068c, 0x206942ab72c0288a, 0x11ca4400401cb00a, 0x56043286842ab159, 0xab082ac341005069, 0x728ac001a08069ca, 0x561815d11ca18, 0x1055868001a08, 0xb00a22ae88e50000, 0x72c02881a72aadc, 0x2aac564472d10010, 0x41561a15c10ca1a3, 0xcb4400401cb00a20, 0x510010055911, 0x55810cae58051000, 0xaac3421559940104, 0x1561a15d11ca1a72, 0x6e58051056447284, 0x515841561a0c2845, 0x82ac340005040306, 0xac001a08069caab0, 0x561815d11ca18728, 0x1055868001a08000, 0x7286942ab0000000, 0x911ca10050695644, 0x8308115a86004415, 0x100508556100506, 0x55868001a080002, 0x5800561800000001, 0xc00030e51, 0x3410000, 0x100d395561055868, 0xa239434e55580034, 0x3410082ac34ab, 0x556000000020ab0d, 0xab0d2ae88e50d39, 0xb50c0088aba23942, 0x2aac20ab0d069caa, 0x341000068201a6, 0x34000000020ab0d0, 0x1a08029caab082ac, 0x6820000000000, 0x39434e5558000000, 0xc88e5082ac342ba2, 0x41a50aadcb00a22a, 0xa080618a2b082ac3, 0x2c0288aba2394001, 0x1cb00a2069caab7, 0x8aab55911ca44004, 0x1055868574062869, 0x8021ca2b082ac34, 0x911ca0a50aac001a, 0x1a08040141a10, 0x4100000000001586, 0x20ab0d0003, 0x8069caab082ac340, 0x68200000000001a0, 0x20ab0d0000000000, 0xab00068201a72aac, 0x55868144450869ca, 0x41561a000682010, 0x8200000000000000, 0x1a0800000000006, 0x10558680, 0x0, 0xae88e50d39556000, 0x888ba239420ab0d2, 0xab0d049ca8b72c02, 0x68201a62aac20, 0xaadcb00a22ae88e5, 0x10072c02881a72, 0xa1a62aad17447291, 0xb0d041561a55d018, 0x68200a72aac20a, 0x49034472809ca8b0, 0x561a000682000458, 0xaba2394000000041, 0xa2069caab72c0288, 0x911cb4400401cb00, 0x85740628698aab45, 0x10072c0288105586, 0x400401574472d100, 0x2b96014400000014, 0x1556c50050157406, 0x434472829caab0d3, 0x4440911ca1055868, 0x5586804a14591201, 0x1410043145610, 0x8201a72aac20ab0d, 0x74472849ca8b0006, 0xa000682000458491, 0x2aac000000041561, 0x41561a55d11ca1a7, 0x16a1801111744728, 0xc555841561a09315, 0x6820000d04014, 0x848000000041561a, 0x240001395160045, 0xd04000000000, 0xb0d0003410000000, 0x82ac34000000020a, 0x1a08069caab0, 0x682000000, 0x1a72aac20ab0d000, 0x50869caab0006820, 0x682010558681444, 0x41561a00, 0x6820000000, 0x55868001a080000, 0x1, 0xac34000000000000, 0x1a08061ca2b082, 0x1a15911ca1a50aac, 0x15860001a0804014, 0x869caab000000000, 0x1ca1055868574472, 0x4a155a8600445591, 0xc1145610558683, 0x5860001a08000341, 0x40141a0000000001, 0x804010a1158, 0x300000000, 0x2820000000000, 0x828000a080000000, 0x1050, 0x0, 0x41420a000282, 0x1050828000, 0x4000000000014100, 0x50, 0x0, 0x14100000000, 0x0, 0x0, };

int main()
{
	unsigned testCaseCount;
	cin >> testCaseCount;
	for (unsigned testCaseIndex = 0; testCaseIndex < testCaseCount; testCaseIndex++)
	{
		// Reads the test case input board
		char c;
		array<array<unsigned, 3>, 3> board;
		for (unsigned i = 0; i < 3; i++)
			for (unsigned j = 0; j < 3; j++)
			{
				cin >> c;
				board[i][j] = c == '.' ? 0u : c == 'X' ? 1u : 2u;
			}

		// Looks up the current board's reachability
		unsigned num = toNum(board);
		cout << (reachable[num / 64] & (1ull << num % 64) ? "yes" : "no") << endl;
	}
	return 0;
}

/* LOOKUP TABLE GENERATION PROGRAM:
#include <array>
#include <iostream>
#include <sstream>
#include <vector>

using namespace std;

// Encodes each board state as a unique id.
inline constexpr unsigned toNum(const array<array<unsigned, 3>, 3>& b)
{
	return
		b[0][0] * 6561 +
		b[0][1] * 2187 +
		b[0][2] * 729 +
		b[1][0] * 243 +
		b[1][1] * 81 +
		b[1][2] * 27 +
		b[2][0] * 9 +
		b[2][1] * 3 +
		b[2][2] * 1;
}

// Returns the winner of board or 0 if there is no winner
inline constexpr unsigned winner(const array<array<unsigned, 3>, 3>& board)
{
	for (unsigned i = 0; i < 3; i++)
	{
		if (board[i][0] && board[i][0] == board[i][1] && board[i][1] == board[i][2])
		{
			return board[i][0];
		}
		if (board[0][i] && board[0][i] == board[1][i] && board[1][i] == board[2][i])
		{
			return board[0][i];
		}
	}
	if (board[0][0] && board[0][0] == board[1][1] && board[1][1] == board[2][2])
	{
		return board[0][0];
	}
	if (board[0][2] && board[0][2] == board[1][1] && board[1][1] == board[2][0])
	{
		return board[0][2];
	}
	return 0;
}

// Finds all reachable board states starting with board
inline void search(vector<unsigned long long>& reachable, array<array<unsigned, 3>, 3>& board, unsigned player)
{
	unsigned num = toNum(board);
	reachable[num / 64] |= 1ull << num % 64;
	if (!winner(board))
	{
		for (unsigned i = 0; i < 3; i++)
			for (unsigned j = 0; j < 3; j++)
			{
				if (board[i][j] == 0)
				{
					board[i][j] = player;
					search(reachable, board, 3 - player);
					board[i][j] = 0;
				}
			}
	}
}

// Finds all reachable board positions starting with a new game
inline void search(vector<unsigned long long>& reachable)
{
	array<array<unsigned, 3>, 3> start
	{
		0, 0, 0,
		0, 0, 0,
		0, 0, 0,
	};
	search(reachable, start, 1);
}

int main()
{
	// Generates all reachable board positions
	vector<unsigned long long> reachable(19683u / 64 + 1, 0);
	search(reachable);

	// Prints the C++ array initializer for the lookup table.
	stringstream stream;
	stream << "{ " << hex;
	for (unsigned i = 0; i < 19683 / 64 + 1; i++)
		stream << "0x" << reachable[i] << ", ";
	stream << "}";
	cout << stream.str();

	return 0;
}
*/